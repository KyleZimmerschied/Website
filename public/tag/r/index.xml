<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Mike Nguyen</title>
    <link>https://mikenguyen.netlify.app/tag/r/</link>
      <atom:link href="https://mikenguyen.netlify.app/tag/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© Mike Nguyen 2021</copyright><lastBuildDate>Wed, 24 Nov 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://mikenguyen.netlify.app/images/icon_huef6d9e7391192e98fbb8d5b03794bb07_956_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>https://mikenguyen.netlify.app/tag/r/</link>
    </image>
    
    <item>
      <title>refer to relative path in blogdown</title>
      <link>https://mikenguyen.netlify.app/post/refer-to-relative-path-in-blogdown/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/refer-to-relative-path-in-blogdown/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/refer-to-relative-path-in-blogdown/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;When you write your posts/blogs on blogdown, you might not want to always refer to the absolute path appeared on your website (because you might change your domain name and all hell breaks loose).&lt;/p&gt;
&lt;p&gt;Then, to specify relative path you can&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: Change your &lt;code&gt;config.toml&lt;/code&gt; file by searching for &lt;code&gt;[permalinks]&lt;/code&gt; then include relative path for your post:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;[permalinks] 
    authors = &amp;quot;/author/:slug/&amp;quot; 
    tags = &amp;quot;/tag/:slug/&amp;quot; 
    categories = &amp;quot;/category/:slug/&amp;quot; 
    publication_types = &amp;quot;/publication-type/:slug/&amp;quot; 
    post = &amp;quot;/post/:slug&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Step 2: Then you can start writing like usual again. For example, you can find the last post &lt;code&gt;[here](/post/slug_name_for_other_post/)&lt;/code&gt; where &lt;code&gt;here&lt;/code&gt; will be highlighted with the URL to the other post.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Create your own hexagon in R</title>
      <link>https://mikenguyen.netlify.app/post/create-your-own-hexagon-in-r/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/create-your-own-hexagon-in-r/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/create-your-own-hexagon-in-r/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This is a super fast and easy way to create your first hexagon in R.&lt;/p&gt;
&lt;p&gt;Enjoy !!!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;hexSticker&amp;quot;)
library(hexSticker)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;hexSticker&amp;#39; was built under R version 4.0.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;imgurl &amp;lt;- &amp;quot;./logo.png&amp;quot;

plot(
  sticker(
    imgurl,
    package = &amp;quot;&amp;quot;,
    # p_size = 26,
    # p_color = &amp;quot;black&amp;quot;,
    
    # p_x = 1,
    # p_y = 1.5,
    
    s_x = 1,
    s_y = 1,
    s_width = 0.9,
    # s_height = 0.4,
    h_fill = &amp;quot;gray100&amp;quot;,
    h_color = &amp;quot;black&amp;quot;,
    h_size = 2,
    # spotlight = T,
    asp = 0.86,
    # filename = &amp;quot;inst/figures/imgfile.png&amp;quot;
    filename = &amp;quot;./imgfile.png&amp;quot;
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://mikenguyen.netlify.app/post/create-your-own-hexagon-in-r/index.en_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::include_graphics(&amp;quot;./imgfile.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;imgfile.png&#34; width=&#34;259&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to add cover image to bookdown</title>
      <link>https://mikenguyen.netlify.app/post/how-to-add-cover-image-to-bookdown/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/how-to-add-cover-image-to-bookdown/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/how-to-add-cover-image-to-bookdown/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;pre&gt;&lt;code&gt;&amp;lt;div style = &amp;quot;text-align: center&amp;quot;&amp;gt;

![](cover.jpg)

&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can also use &lt;code&gt;r&lt;/code&gt; block&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::include_graphics(&amp;#39;cover.jpg&amp;#39;, dpi = NA)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Bookdown Statistics</title>
      <link>https://mikenguyen.netlify.app/post/bookdown-statistics/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/bookdown-statistics/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/bookdown-statistics/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;It’s possible to have basic statistics from bookdown using &lt;code&gt;connectapi&lt;/code&gt; (&lt;a href=&#34;https://github.com/sol-eng/connect-usage&#34;&gt;basic example&lt;/a&gt;). However, this feature is very limited.&lt;/p&gt;
&lt;p&gt;Hence, it is better to &lt;a href=&#34;(%7B%7B%3C%20relref%20%22../2021-08-14-how-to-connect-bookdown-with-google-analytics%22%20%3E%7D%7D)&#34;&gt;connect bookdown to Google Analytics&lt;/a&gt; to have better metrics. However, the trade-off is that you can’t see every book’s performance at once even though they are all under one account, since it is in one property. You could use Roll-up report, but then you will have to pay to use that feature.&lt;/p&gt;
&lt;p&gt;Another solution is to use Google Analytics API and write your R script to see customized performance of all your books.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to connect bookdown with google analytics</title>
      <link>https://mikenguyen.netlify.app/post/how-to-connect-bookdown-with-google-analytics/</link>
      <pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/how-to-connect-bookdown-with-google-analytics/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/how-to-connect-bookdown-with-google-analytics/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create &lt;a href=&#34;https://analytics.google.com/&#34;&gt;Google Analytics account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Choose “Analytics Accounts”&lt;/li&gt;
&lt;li&gt;Create “Properties &amp;amp; Apps”&lt;/li&gt;
&lt;li&gt;In “Data Streams”, “Add stream” with your website URL&lt;/li&gt;
&lt;li&gt;Under “Tagging Instructions”, click on gtag.js. You should see something like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Global site tag (gtag.js) - Google Analytics --&amp;gt;
&amp;lt;script async src=&amp;quot;https://www.googletagmanager.com/gtag/js?id=G-DMNX2X65HQ&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag(&amp;#39;js&amp;#39;, new Date());

  gtag(&amp;#39;config&amp;#39;, &amp;#39;GA_MEASUREMENT_ID&amp;#39;);
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where you see &lt;code&gt;GA_MEASUREMENT_ID&lt;/code&gt;, you will your own number.&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create a &lt;code&gt;.html&lt;/code&gt; file and paste the code script and save it in your bookdown folder. Name it &lt;code&gt;google_analytics.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;_output.yml&lt;/code&gt;, change it to&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;bookdown::gitbook:
  includes:
    in_header: [google_analytics.html]
  css: style.css&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;8&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Upload your bookdown&lt;/li&gt;
&lt;li&gt;Go to Google Analytics your Google Analytics account. And voila.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Template for Shiny</title>
      <link>https://mikenguyen.netlify.app/post/template-for-shiny/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/template-for-shiny/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/template-for-shiny/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;New Template to get you produce cool Shiny App instantly&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/flexdashboard/index.html&#34;&gt;flexdashboard&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;flexdashboard&amp;quot;)
library(flexdashboard)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CSS and SASS in Shiny</title>
      <link>https://mikenguyen.netlify.app/post/css-and-sass/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/css-and-sass/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/css-and-sass/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;CSS = Cascading Style Sheets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Selector&lt;/li&gt;
&lt;li&gt;Declaration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To add CSS to Shiny:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add styling to tags&lt;/li&gt;
&lt;li&gt;Add CSS to HTML header&lt;/li&gt;
&lt;li&gt;Add style sheets with the www directory (most ideal)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SASS = Systematically Awesome Style Sheets (built on top of CSS)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;SASS&lt;/th&gt;
&lt;th&gt;CSS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Object oriented&lt;/td&gt;
&lt;td&gt;Statement oriented&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Allows nesting&lt;/td&gt;
&lt;td&gt;No nesting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Allows variables&lt;/td&gt;
&lt;td&gt;Limited variable declaration&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Table by Pedro Silva from Appsilon&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>reproducible example (reprex)</title>
      <link>https://mikenguyen.netlify.app/post/reproducible-example-reprex/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/reproducible-example-reprex/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/reproducible-example-reprex/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;install once per computer&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;reprex&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or part of `tidyverse&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can either call it in every session&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reprex)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or put it in &lt;code&gt;.Rprofile&lt;/code&gt; for each machine to run whenever you open R&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (interactive()){
  suppressMessages(require(reprex))
}
options(
  reprex.advertise = FALSE, 
  reprex.si = TRUE, 
  reprex.style = TRUE,
  reprex.comment = &amp;quot;#;-&amp;quot;,
  reprex.tidyverse_quiet = FALSE
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to see your &lt;code&gt;.Rprofile&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;usethis::edit_r_profile()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;reprex&lt;/code&gt; is an interactive workflow package, don’t use this with &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;ggplot2&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;When ever you want to ask people about your code, or ask them to debug it&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Copy your code to clipboard&lt;/li&gt;
&lt;li&gt;Simply run in your console&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reprex()


reprex(advertise = TRUE, # To suppress ads
       si = TRUE, # to include session info
       style = TRUE, # restyle your code
       tidyverse_quiet = TRUE # suppress tidyverse message
       )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or instead of doing it manually, you can select your code, and under “Addins”. select “Render reprex”&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scaling Shiny</title>
      <link>https://mikenguyen.netlify.app/post/scaling-shiny/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/scaling-shiny/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/scaling-shiny/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;To solve the problem of scaling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From DevOps/IT:
&lt;ul&gt;
&lt;li&gt;Add memory, CPU&lt;/li&gt;
&lt;li&gt;Rstudio Connect set up for multiple machines&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;From R/Shiny engineer:
&lt;ul&gt;
&lt;li&gt;use &lt;a href=&#34;https://book.javascript-for-r.com/shiny-intro.html&#34;&gt;Javascript&lt;/a&gt; for less CPU usage&lt;/li&gt;
&lt;li&gt;extract computations: &lt;a href=&#34;https://appsilon.com/shiny-worker-package/&#34;&gt;Shiny worker&lt;/a&gt;, &lt;a href=&#34;https://www.rplumber.io/&#34;&gt;Plumber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;use a &lt;a href=&#34;https://shiny.rstudio.com/articles/overview.html&#34;&gt;database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>New Pipe in R</title>
      <link>https://mikenguyen.netlify.app/post/new-pipe-in-r/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/new-pipe-in-r/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/new-pipe-in-r/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;You can read more in Michael Barrowman’s
&lt;a href=&#34;https://michaelbarrowman.co.uk/post/the-new-base-pipe/&#34;&gt;post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But the basic idea is that using the new pipe &lt;code&gt;|&amp;gt;&lt;/code&gt; from the &lt;code&gt;magrittr&lt;/code&gt; library
is much faster than your old pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;magrittr&amp;quot;)
remotes::install_github(&amp;quot;Myko101/magrittrclassic&amp;quot;)
library(&amp;quot;magrittr&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)
doubler &amp;lt;- function(val) 2*val
x &amp;lt;- 1:10
bm &amp;lt;- bench::mark(
  standard = doubler(x),
  magrittrclassic = x %&amp;gt;&amp;gt;% doubler(),
  magrittr = x %&amp;gt;% doubler(),
  base = x |&amp;gt; doubler()
)
ggplot2::autoplot(bm)
bm2 &amp;lt;- bench::mark(
  standard = (function(y) 2*y)(x),
  magrittrclassic = x %&amp;gt;&amp;gt;% {2*.},
  magrittr = x %&amp;gt;% {2*.},
  base = x |&amp;gt; \(y) 2*y
)
ggplot2::autoplot(bm2)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Randomized Study Design</title>
      <link>https://mikenguyen.netlify.app/post/randomized-study-design/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/randomized-study-design/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/randomized-study-design/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;We can leverage R to create randomized studies using
&lt;a href=&#34;https://www.jdtrat.com/packages/shinysurveys/&#34;&gt;shinysurveys&lt;/a&gt; with learnr&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;shinysurveys&amp;quot;)
library(&amp;quot;learnr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ou can also use &lt;a href=&#34;https://formr.org/&#34;&gt;formr&lt;/a&gt; to create survey with &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>fix for &#34;cannot allocate vector of size&#34;</title>
      <link>https://mikenguyen.netlify.app/post/fix-for-cannot-allocate-vector-of-size/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/fix-for-cannot-allocate-vector-of-size/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/fix-for-cannot-allocate-vector-of-size/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;More package author’s introduction, please access this &lt;a href=&#34;https://cran.r-project.org/web/packages/disk.frame/readme/README.html&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instead of loading everything at once into your RAM, you divide your data into chunks.
To quote author of the &lt;code&gt;disk.frame&lt;/code&gt; package: “we go from”R can only deal with data that fits in RAM&#34; to “R can deal with any data that fits on disk”.&#34; While &lt;code&gt;data.frame&lt;/code&gt; uses in-RAM to process, &lt;code&gt;disk.frame&lt;/code&gt; uses hard drive to store and process data.&lt;code&gt;disk.frame&lt;/code&gt; also allows parallel processing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;disk.frame&amp;quot;) 
# setup_disk.frame() # sets up background workers equal to the number of CPU c res setup_disk.frame(workers =\ 2) \# or you number of workers options(future.globals.maxSize = \Inf) # large dataset can be transferred between sessions
# attr(data.df, &amp;quot;path&amp;quot;) # path to where the disk.frame is 


# to convert data.frame to a     disk.frame
data.df &amp;lt;- as.disk.frame(original_data_frame)

# to convert one large CSV
# takes care of splitting large CSV into smaller ones 
diskf &amp;lt;- disk.frame::csv_to_disk.frame(path_to_csv_file) # you can also specify,outdir = , overwrite = T.     

# to convert multiple CSV
multiple_CSV = c(path_to_csv_file1,path_to_csv_file2)
diskf = disk.frame::csv_to_disk.frame(multiple_CSV)

# for faster performance, specify which column to manipulate
result  = df %&amp;gt;% 
  srep(c(&amp;quot;column1&amp;quot;,&amp;quot;column2&amp;quot;)) %&amp;gt;%
  dplyr::filter()&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>caching for faster Shiny app</title>
      <link>https://mikenguyen.netlify.app/post/caching-for-faster-shiny-app/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/caching-for-faster-shiny-app/</guid>
      <description>


&lt;p&gt;To have faster performance with Shiny App, you can pass this command to yoru script.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# %&amp;gt;% bindCache()&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>create your own package</title>
      <link>https://mikenguyen.netlify.app/post/create-your-own-package/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/create-your-own-package/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;usethis&amp;quot;)
create_package(path = &amp;quot;../package_name&amp;quot;)
use_description()
usethis::is_package()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;load library&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(devtools)
load_all() # Cmd/Ctrl + Shift + L

# use_pipe()
use_package(&amp;quot;dplyr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You also need to modify your description file&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Imports:
  ggplot2
  dplyr

# install all dependencies in DESCRIPTION
install_deps()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create function&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;your_own_function &amp;lt;- function(){
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test your package&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test() # Cmd/Ctrl + Shift + T&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;check Malcolm Barrett’s &lt;a href=&#34;https://zenartofrpkgs.netlify.app/#1&#34;&gt;slides&lt;/a&gt; for more detail&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>learnr to guide students</title>
      <link>https://mikenguyen.netlify.app/post/learnr-to-guide-students/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/learnr-to-guide-students/</guid>
      <description>


&lt;p&gt;Teaching statistics or data science, we can use &lt;code&gt;learnr&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# library(&amp;quot;learnr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To collect data, we can use &lt;code&gt;learnrhash&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# library(&amp;quot;learnrhash&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember to adjust parameters so your &lt;code&gt;Shinyapp.io&lt;/code&gt; can handle the number of students you have in the class. Or you can upload it to GitHub, then students can install to your local machine later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>use dplyr in Python - siuba library</title>
      <link>https://mikenguyen.netlify.app/post/use-dplyr-in-python-siuba-library/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/use-dplyr-in-python-siuba-library/</guid>
      <description>


&lt;p&gt;Use siuba library in Python to preserve all your skills from &lt;code&gt;dplyr&lt;/code&gt; package in &lt;code&gt;R&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;pip install siuba&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see TidyTuesday for tutorial&lt;/p&gt;
&lt;p&gt;Or &lt;a href=&#34;https://learn.siuba.org/intro-data-science/&#34;&gt;Learn Siuba&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>psychological experiments</title>
      <link>https://mikenguyen.netlify.app/post/psychological-experiments/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/psychological-experiments/</guid>
      <description>
&lt;link href=&#34;https://mikenguyen.netlify.app/rmarkdown-libs/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://mikenguyen.netlify.app/rmarkdown-libs/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Use &lt;code&gt;jaysire&lt;/code&gt; package to build flexible behavioral experiments in R. Why?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better workflow&lt;/li&gt;
&lt;li&gt;Free&lt;/li&gt;
&lt;li&gt;Cutomizable&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;remotes::install_github(&amp;quot;djnavarro/jaysire&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>renv</title>
      <link>https://mikenguyen.netlify.app/post/renv/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/renv/</guid>
      <description>
&lt;link href=&#34;https://mikenguyen.netlify.app/rmarkdown-libs/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://mikenguyen.netlify.app/rmarkdown-libs/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Check where your package is installed&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;find.package(&amp;quot;dplyr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;C:/Program Files/R/R-4.0.3/library/dplyr&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All projects use the same library path. Then for each project, you need different library dependencies.&lt;/p&gt;
&lt;div id=&#34;intializing-a-project&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Intializing a project&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;renv::init()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;code&gt;.Rprofile&lt;/code&gt; is created that forks the current R libraries.&lt;/p&gt;
&lt;p&gt;Now, you can work as before. But the current state of packages would not change.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;snapshot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Snapshot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;renv::snapshot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function tells you the current state of a project, and whether you can to update any packages in that project.&lt;/p&gt;
&lt;p&gt;The lockfile is a JSON file that tells you packages installed in your project, versions, and sources.&lt;/p&gt;
&lt;p&gt;This is useful for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time capsules (you can return to this project in the future without any unexpected changes)&lt;/li&gt;
&lt;li&gt;Collaborative workflows (different people might have different packages installed).&lt;/li&gt;
&lt;li&gt;Deployments (you can run your project remotely)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;restore&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Restore&lt;/h2&gt;
&lt;p&gt;To restore the previously snapshot, you can use&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;renv::restore()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## * The library is already synchronized with the lockfile.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Apache Arrow</title>
      <link>https://mikenguyen.netlify.app/post/apache-arrow/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/apache-arrow/</guid>
      <description>
&lt;link href=&#34;index_files/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;index_files/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;more information can be found in &lt;a href=&#34;https://ursalabs.org/&#34;&gt;URSA Labs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This example is from &lt;a href=&#34;https://ursalabs.org/arrow-r-nightly/articles/dataset.html&#34;&gt;Arrow Vignettes&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;arrow&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;arrow&lt;/h1&gt;
&lt;p&gt;best when working with big data&lt;/p&gt;
&lt;div id=&#34;prep&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prep&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;arrow&amp;quot;, warn.conflicts = FALSE)
library(&amp;quot;dplyr&amp;quot;, warn.conflicts = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;check if S3 support is included.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;arrow::arrow_with_s3()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If TRUE, sync data locally import from &lt;a href=&#34;https://www1.nyc.gov/site/tlc/about/tlc-trip-record-data.page&#34;&gt;https://www1.nyc.gov/site/tlc/about/tlc-trip-record-data.page&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;arrow::copy_files(&amp;quot;s3://ursa-labs-taxi-data&amp;quot;, &amp;quot;nyc-taxi&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;since the data is in Parquet format, we use&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ds &amp;lt;- open_dataset(&amp;quot;nyc-taxi&amp;quot;, partitioning = c(&amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then you can start using data set as usual&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ds&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
